from django.contrib import admin
from .models import (
    Customer, Vendor, Category, Product, Warehouse, Inventory,
    SalesOrder, SalesOrderItem, PurchaseOrder, PurchaseOrderItem,
    ChartOfAccounts, JournalEntry, JournalLine,
    Department, Position, Employee,
    InventoryTransaction, FinancialReport, Lead, LeadNote, EmailInquiry,
    UserPreference
)

# Customer & Vendor Admin
@admin.register(Customer)
class CustomerAdmin(admin.ModelAdmin):
    list_display = ['customer_code', 'name', 'email', 'customer_type', 'is_active', 'created_at']
    list_filter = ['customer_type', 'is_active', 'created_at']
    search_fields = ['name', 'email', 'customer_code']
    readonly_fields = ['id', 'created_at', 'updated_at']

@admin.register(Vendor)
class VendorAdmin(admin.ModelAdmin):
    list_display = ['vendor_code', 'name', 'contact_person', 'email', 'vendor_type', 'is_active']
    list_filter = ['vendor_type', 'is_active', 'created_at']
    search_fields = ['name', 'email', 'vendor_code']
    readonly_fields = ['id', 'created_at', 'updated_at']

# Product & Inventory Admin
@admin.register(Category)
class CategoryAdmin(admin.ModelAdmin):
    list_display = ['name', 'parent', 'is_active']
    list_filter = ['is_active', 'parent']
    search_fields = ['name']

@admin.register(Product)
class ProductAdmin(admin.ModelAdmin):
    list_display = ['sku', 'name', 'category', 'product_type', 'unit_price', 'is_active'
]
    list_filter = ['product_type', 'category', 'is_active', 'created_at']
    search_fields = ['name', 'sku', 'barcode']
    readonly_fields = ['id', 'created_at', 'updated_at']

@admin.register(Warehouse)
class WarehouseAdmin(admin.ModelAdmin):
    list_display = ['name', 'is_active']
    list_filter = ['is_active']

@admin.register(Inventory)
class InventoryAdmin(admin.ModelAdmin):
    list_display = ['product', 'warehouse', 'quantity_on_hand', 'quantity_available', 'reorder_point']
    list_filter = ['warehouse', 'product__category']
    search_fields = ['product__name', 'product__sku']

# Sales Admin
class SalesOrderItemInline(admin.TabularInline):
    model = SalesOrderItem
    extra = 1

@admin.register(SalesOrder)
class SalesOrderAdmin(admin.ModelAdmin):
    list_display = ['order_number', 'customer', 'order_date', 'status', 'total_amount']
    list_filter = ['status', 'order_date', 'created_by']
    search_fields = ['order_number', 'customer__name']
    inlines = [SalesOrderItemInline]
    readonly_fields = ['id', 'updated_at']

# Purchase Admin
class PurchaseOrderItemInline(admin.TabularInline):
    model = PurchaseOrderItem
    extra = 1

@admin.register(PurchaseOrder)
class PurchaseOrderAdmin(admin.ModelAdmin):
    list_display = ['po_number', 'vendor', 'order_date', 'status', 'total_amount']
    list_filter = ['status', 'order_date', 'created_by']
    search_fields = ['po_number', 'vendor__name']
    inlines = [PurchaseOrderItemInline]
    readonly_fields = ['id', 'updated_at']

# Accounting Admin
@admin.register(ChartOfAccounts)
class ChartOfAccountsAdmin(admin.ModelAdmin):
    list_display = ['account_code', 'account_name', 'account_type', 'is_active']
    list_filter = ['account_type', 'is_active']
    search_fields = ['account_code', 'account_name']

class JournalLineInline(admin.TabularInline):
    model = JournalLine
    extra = 2

@admin.register(JournalEntry)
class JournalEntryAdmin(admin.ModelAdmin):
    list_display = ['entry_number', 'date', 'description', 'entry_type', 'is_posted', 'total_debit', 'total_credit']
    list_filter = ['entry_type', 'is_posted', 'date', 'created_by']
    search_fields = ['entry_number', 'description']
    inlines = [JournalLineInline]
    readonly_fields = ['id', 'created_at']

# HR Admin
@admin.register(Department)
class DepartmentAdmin(admin.ModelAdmin):
    list_display = ['name', 'manager', 'is_active']
    list_filter = ['is_active']
    search_fields = ['name']

@admin.register(Position)
class PositionAdmin(admin.ModelAdmin):
    list_display = ['title', 'department', 'min_salary', 'max_salary', 'is_active']
    list_filter = ['department', 'is_active']
    search_fields = ['title']

@admin.register(Employee)
class EmployeeAdmin(admin.ModelAdmin):
    list_display = ['employee_id', 'user', 'position', 'department', 'employment_status', 'hire_date']
    list_filter = ['employment_status', 'department', 'position', 'hire_date']
    search_fields = ['employee_id', 'user__username', 'user__first_name', 'user__last_name']
    readonly_fields = ['created_at', 'updated_at']

# Inventory Transactions Admin
@admin.register(InventoryTransaction)
class InventoryTransactionAdmin(admin.ModelAdmin):
    list_display = ['transaction_type', 'product', 'warehouse', 'quantity', 'created_at']
    list_filter = ['transaction_type', 'warehouse', 'created_at']
    search_fields = ['product__name', 'reference_number']
    readonly_fields = ['id', 'created_at']

# Financial Reports Admin
@admin.register(FinancialReport)
class FinancialReportAdmin(admin.ModelAdmin):
    list_display = ['name', 'report_type', 'start_date', 'end_date', 'generated_at', 'generated_by']
    list_filter = ['report_type', 'generated_at']
    search_fields = ['name']
    readonly_fields = ['generated_at']


# Lead & Email Inquiry Management Admin
class LeadNoteInline(admin.TabularInline):
    model = LeadNote
    extra = 0
    readonly_fields = ['created_by', 'created_at']


@admin.register(Lead)
class LeadAdmin(admin.ModelAdmin):
    list_display = ['lead_number', 'name', 'email', 'company', 'status', 'priority', 'source', 'created_at']
    list_filter = ['status', 'priority', 'source', 'created_at', 'assigned_to']
    search_fields = ['lead_number', 'name', 'email', 'company', 'subject']
    readonly_fields = ['id', 'lead_number', 'created_at', 'updated_at', 'conversion_date']
    inlines = [LeadNoteInline]
    fieldsets = (
        ('Contact Information', {
            'fields': ('lead_number', 'name', 'email', 'phone', 'company')
        }),
        ('Lead Details', {
            'fields': ('subject', 'message', 'source', 'status', 'priority')
        }),
        ('Assignment', {
            'fields': ('assigned_to', 'next_follow_up')
        }),
        ('Products & Value', {
            'fields': ('interested_products', 'estimated_value')
        }),
        ('Email Integration', {
            'fields': ('email_thread_id', 'original_email'),
            'classes': ('collapse',)
        }),
        ('Conversion', {
            'fields': ('converted_to_customer', 'converted_to_sales_order', 'conversion_date'),
            'classes': ('collapse',)
        }),
        ('Metadata', {
            'fields': ('created_by', 'created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )


@admin.register(EmailInquiry)
class EmailInquiryAdmin(admin.ModelAdmin):
    list_display = ['from_email', 'from_name', 'subject', 'status', 'received_at', 'processed_at']
    list_filter = ['status', 'received_at', 'processed_at']
    search_fields = ['from_email', 'from_name', 'subject', 'body']
    readonly_fields = ['id', 'message_id', 'received_at', 'created_at', 'processed_at', 'processed_by']
    fieldsets = (
        ('Email Details', {
            'fields': ('from_email', 'from_name', 'subject', 'body', 'body_html')
        }),
        ('Email Metadata', {
            'fields': ('message_id', 'in_reply_to', 'received_at', 'attachments')
        }),
        ('Processing', {
            'fields': ('status', 'processed_to_lead', 'processed_at', 'processed_by')
        }),
        ('Raw Data', {
            'fields': ('raw_email',),
            'classes': ('collapse',)
        }),
    )

@admin.register(UserPreference)
class UserPreferenceAdmin(admin.ModelAdmin):
    list_display = ['user', 'language', 'currency', 'date_format', 'time_zone']
    list_filter = ['language', 'currency', 'time_zone']
    search_fields = ['user__username', 'user__first_name', 'user__last_name']
    readonly_fields = ['created_at', 'updated_at']
    fieldsets = (
        ('User', {
            'fields': ('user',)
        }),
        ('Language & Localization', {
            'fields': ('language', 'date_format', 'time_format', 'time_zone')
        }),
        ('Currency & Number Formatting', {
            'fields': ('currency', 'currency_display', 'decimal_separator')
        }),
        ('Display Preferences', {
            'fields': ('items_per_page', 'theme')
        }),
        ('Metadata', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )
